//
// Doxygen group definition
//

/**
 * @defgroup common Revised OpenFlow Library Common Part
 *
 * The Revised OpenFlow Library common part (ROFL) is a library for implementing the OpenFlow
 * protocol as defined by the Open Networking Foundation (ONF), see [1]. 
 * Its basic task is to provide an OpenFlow communication abstraction for entities acting in datapath role, 
 * controller role or both and implements besides a protocol parser, all logic to map OpenFlow 
 * messages into corresponding C++ classes. rofl-common was build in a modular way for easy 
 * extensibility and supports a number of OpenFlow versions: v1.0, v1.2, v1.3 at the time 
 * of writing. 
 *
 * rofl-common is available under Mozilla Public License v2.0. 
 *
 * [1] https://www.opennetworking.org
 * 
 */

/**
 * @defgroup common_howto Howto: using rofl-common 
 * @ingroup common
 *
 * In this section we provide a brief walk-through, how to use rofl-common in 
 * an existing project for adding OpenFlow support.
 */

/**
 * @defgroup common_devel ROFL for developers
 * @ingroup common
 *
 * This section discusses some internals of rofl-common and how the 
 * various pieces interact with each other.
 */

/**
 * @defgroup common_devel_workflow Workflow
 * @ingroup common_devel
 * 
 * Let's have a look on the classes in rofl-common defining the actual 
 * workflow and how messages traverse the protocol stack. rofl-common 
 * defines a set of classes for implementing the protocol's core logic 
 * actually building a hierarchy starting at a plain socket instance.
 *  
 * All workflow related classes in rofl-common come with their own 
 * environment class (e.g., rofl::crofsock_env for rofl::crofsock) 
 * that defines the interface expected. A class on layer n+1 implements
 * the interface defined by the class locate on layer n.
 *
 * a) Class rofl::csocket_plain provides an C++ abstraction for the 
 * BSD sockets offered by the underlying operating system. ROFL allows
 * building of various socket types and a common base class for all 
 * sockets named rofl::csocket. Class csocket_plain provides support
 * for UDP and TCP based unencrypted sockets. Class socket_openssl 
 * uses the OpenSSL toolkit [1] to add TLS based encryption to TCP sockets.  
 *
 * a) Class rofl::crofsock maps OpenFlow messages from their wire 
 * representation into the associated OpenFlow classes defined by 
 * rofl-common and provides support for basic message validation.
 *
 * b) Class rofl::crofconn provides the abstraction of an OpenFlow control connection
 * as defined since OpenFlow v1.3. It negotiates the OpenFlow protocol version to be used
 * with the connected peer entity and detects the datapath identifier when acting in 
 * controller mode.
 *
 * c) Class rofl::crofchan binds multiple control connections into an OpenFlow control
 * channel and defines the mutual dependencies between the main control connection 
 * using control connection identifier 0 and the remaining auxiliary control connections.
 *
 * d) Class rofl::crofctl represents a remote controller entity and provides 
 * various methods for sending OpenFlow messages to this controller entity over any
 * of the defined control connections.
 *
 * e) Class rofl::crofdpt represents a remote datapath element and provides
 * various methods for sending OpenFlow messages to this datapath element over any
 * of the defined control connections.
 *
 * f) Class rofl::crofbase defines rofl-common's main class, as any advanced application
 * logic requiring OpenFlow support should derive from this class. It implements all
 * handlers for receiving various notification events from instances of classes 
 * rofl::crofctl and rofl::crofdpt, respectively. 
 * 
 */

/**
 * @defgroup common_devel_ioservice I/O service
 * @ingroup common_devel
 *
 * ROFL defines its own IO service for event handling, e.g., for 
 * dealing with file or socket descriptors. This IO system is used
 * internally by several classes in rofl-common, but may also be used
 * by other external modules making use of rofl-common. Please note, this IO subsystem
 * is not meant to be a high performance one for building packet IO systems, rather
 * it aims towards a simple thread-safe framework for driving logic
 * of OpenFlow management endpoints. 
 */

/**
 * @defgroup common_devel_bsd_sockets BSD sockets
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_exceptions Runtime errors
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_openflow OpenFlow structures and concepts in rofl-common
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_openflow_structures C++ classes representing various C structures in OpenFlow
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_openflow_messages C++ classes representing OpenFlow messages
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_openflow_exceptions OpenFlow runtime errors 
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_openflow_experimental Experimental OpenFlow extensions
 * @ingroup common_devel_openflow
 */

/**
 * @defgroup common_devel_auxiliary Auxiliary classes providing glue towards the underlying operating system
 * @ingroup common_devel
 */

/**
 * @defgroup common_devel_auxiliary_logging rofl-common's logging facility
 * @ingroup common_devel_auxiliary
 */

/**
 * @defgroup common_devel_auxiliary_sockets Use of BSD style sockets in rofl-common including support for OpenSSL
 * @ingroup common_devel_auxiliary
 */

/**
 * @defgroup common_devel_protocols Protocol definitions for Ethernet, VLAN, MPLS, IPv4/v6, ICMPv4/v6/ARP, TCP, UDP, SCTP, ...
 * @ingroup common_devel
 */


