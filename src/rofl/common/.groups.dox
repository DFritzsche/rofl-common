//
// Doxygen group definition
//


// common
/**
*
* @defgroup common_main The Three Main Classes in ROFL
* @brief This contains the main classes required for managing an OpenFlow protocol endpoint within ROFL.
*
* This includes class crofbase as main entry point and classes cofctl and cofdpt defining 
* an abstraction for an attached controller or data path entity, respectively.
* crofbase offers a number of helper methods for making sending OpenFlow messages an easy and intuitive task.
* cofctl and cofdpt store all relevant information for a single control association.
*
*/

// common (base)
/**
*
* @defgroup common_base Helper Classes for Addresses, MAC-Addresses, etc.
* @brief A number of inevitable base classes for making common things like a struct sockaddr easily managable.
* 
* Here, we gather a number of helper classes for hiding UN*X API complexity behind an easy to use interface,
* e.g. for manging memory access via class cmemory. This also contains the main I/O service defined in ROFL
* that distributes events throughout an OpenFlow protocol endpoint.
* @ingroup common_main
*
*/

// common/openflow
/**
* @defgroup common_openflow C++ mapped OpenFlow data structures
* @brief C++ class representations of (almost all) C structures defined within the OpenFlow specification with getter/setter methods.
*
* In order to make the binary C data structures defined in OpenFlow easily managable, ROFL defines a C++ class representation for 
* each of these structures including actions, matches, buckets, specific statistics, list of the beforementioned entities and so on. 
* These classes provide an interface for manipulating the C structures in an OF version agnostic manner, i.e. ROFL aims to help 
* in getting the right parameter for the right OF version.
* @ingroup common_main
*
*/


// common/openflow/extensions
/**
* @defgroup common_openflow_extensions OpenFlow Protocol Extensions
* @brief ROFL contains a number of extensions to the base OpenFlow protocol, namely the flowspace registration as defined in EU FP7 project SPARC.
*
* This groups useful extensions to the base OpenFlow protocol. However, things may be added or removed, based on the experience made by using them.
* Stay tuned for changes here.
* @ingroup common_openflow
*
*/


// common/openflow/messages
/**
* @defgroup common_openflow_messages OpenFlow Protocol Messages
* @brief Here you find C++ abstractions for all protocol messages defined by OpenFlow.
*
* ROFL provides C++ abstractions for all protocol messages defined in OpenFlow, offering
* access to the messages' parameters. Class crofbase defines a complete set of default handler
* methods for receiving OpenFlow messages. Derived classes may overwrite any of these 
* handler methods for getting direct access to the received message. Please note that 
* ROFL creates all messages on the application's heap, i.e. you must destroy the message
* once you are done with it.
* @ingroup common_openflow
*
*/


// common/openflow/experimental
/**
* @defgroup common_openflow_experimental OpenFlow Experimental Matches and Actions
* @brief OpenFlow allows definition of experimental matches (and actions, well, more or less). 
*
* Based on its history in various research projects, ROFL contains a number of experimental matches 
* and actions, namely for PPPoE/PPP and GTP.
* @ingroup common_openflow
*
*/


// common/protocols
/**
* @defgroup common_protocols Helper Classes for Various Network Protocols
* @brief ROFL provides a set of helper classes for interpreting PDUs of various network protocols like Ethernet, VLAN, MPLS, IPv6/v6, etc.
*
* These helper classes are called frames in ROFL, as they are capable of interpreting any arbitrary memory section 
* as the intended protocol frame. In that sense they behave like C structs, while extending the C struct with 
* a convenient interface for accessing the protocol frame's fields in a safe way.
* @ingroup common_base
*
*/


