/**
*
* @mainpage ROFL-common
*
* @section doc Documentation
*
* @warning This documentation may not be up-to-date
*
* @subsection doc_intro Introduction
*
* @subsubsection doc_intro_what_is_it What is it?
*
* It helps you adding "OpenFlow":http://www.opennetworking.org support to your software to build 
* control applications, controller frameworks, or data path elements. ROFL has served within a 
* number of research projects around SDN/OpenFlow to study its applicability to carrier networks. 
* Check out "OFELIA's":http://www.fp7-ofelia.eu website or the available information from project 
* "SPARC":http://www.fp7-sparc.eu to read about some of the results and insights. Beyond producing 
* papers and powerpoints, we made our hands dirty by developing a set of libraries and a tool box 
* to build OpenFlow enabled software.
*
* _*Common*_ provides basic support for the OpenFlow protocol (protocol parsers, message mangling, 
* etc.) and maps the protocol's wire representation to a set of C++ classes. It hides the nasty 
* details of the protocol and provides a (hopefully) clean and easy to use API to software developers. 
* We aim towards multi-version support under a common hood: currently, the core library supports 
* OpenFlow 1.0 and "OpenFlow 1.2":https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.2.pdf. C
* heck the "features list":https://www.codebasin.net/redmine/projects/rofl-core/wiki/Wiki#Features to see the implementation status of various features. 
*
* _*Datapath*_ contains building blocks for creating data path elements, most notably an OpenFlow pipeline for integration into hardware platforms, network processors, etc.
*
* @subsection doc_features Features
*
* - OpenFlow protocol library written in C++-98 (requires STL support)
* - Seeking for supporting all features defined by "OpenFlow 1.2":https://www.opennetworking.org/images/stories/downloads/sdn-resources/onf-specifications/openflow/openflow-spec-v1.2.pdf 
* - Supports management of multiple controller and data path entities in parallel
* - OpenFlow session negotiation 
* - Multi-version support (OpenFlow 1.0 and OpenFlow 1.2, OpenFlow 1.3 just around the corner ...)
* - Ready-to-run I/O framework and event loop
* - Full mapping of all OpenFlow's C structures into C++ classes
* - Supports controller and data path role or may act in proxy mode
* - Supports flowspace registration (experimental feature from project "SPARC":http://www.fp7-sparc.eu)
* - OpenFlow 1.x compliant pipeline targeting ANSI-C as a nucleus for data path elements
*
* @subsection doc_license License
*
* All ROFL ingredients have been released under "Mozilla Public License 2.0":http://www.mozilla.org/MPL/2.0/.
*
* @subsection doc_how_to_use_it How to use it, Documentation and Support
*
* The best source of information is this doxygen documentation you are currently reading.
*
* There is work on a small *[[tutorial]]* ongoing to highlight some of the core concepts and that 
* shows you how to build a simple controller application in a few minutes.
* 
*
* If you find yourself with a bunch of unanswered questions after reading all available information here, 
* feel free to send an e-mail to _rofl_ _(at)_ _bisdn.de_. We will try to help you and we have a huge number 
* of the usual excuses (too busy, lots of projects running, too much administrative stuff to do, etc.) before 
* generating an answer, so please be a little patient.
*
* We would love to get a note from you if you intend to use ROFL in your project or if you need some help with 
* implementing a new feature. Maybe it is already on our roadmap as well. Having said that, ROFL has been quite 
* useful in a number of projects already, but we consider it still *alpha* software, i.e. there is a non-null 
* probability to stumble across bugs. If you think you have found one (of course, this is impossible, but who 
* knows), please send us a bug report to _rofl_ _(at)_ _bisdn.de_. 
* 
* Many thanks!
*
* @subsection doc_build How to get it and Build Instructions
*
* You need one of the usual fairly modern Linux distributions. It works under Fedora and Debian, but should 
* compile on other systems as well. You need a GNU build system ("autoconf":http://www.gnu.org/software/autoconf/, 
* "automake":http://www.gnu.org/software/automake/, "libtool":http://www.gnu.org/software/libtool/, ...) for 
* compiling the code. There is some support for a (rudimentary) command line available, which is based on 
* "libCLI":https://github.com/dparrish/libcli, so you have to install its development files as well. 
*
* WARNING! The libcli package included in most distributions (Debian based, RedHat based...) is outdated. 
* Please download and install the library from here: "libCLI":https://github.com/dparrish/libcli
* 
* @subsubsection doc_build_step1 Step 1: Grab a copy of the source code.
* 
* @code
sh# git clone git://codebasin.net/rofl-core.git
* @endcode
*
* @subsubsection doc_build_step2 Step 2: Enter the rofl-core directory and call the autogen.sh script
*
* @code
sh# sh autogen.sh
* @endcode
*
* @subsubsection doc_build_step3 Step 3: Enter the build directory and call configure
*
* @code
sh# cd build/
sh# ../configure
* @endcode
*
* @subsubsection doc_build_step4 Step 4: Call make and make install
*
* Default installation directory is _/usr/local_, so you might need rights to add files there or change the installation prefix when executing the _configure_ script.
*
* @code 
sh# make 
sh# make check #Optional
sh# sudo make install
* @endcode
*
* @subsubsection doc_build_optional_params Some optional parameters for @../configure@
*
* @code
--enable-debug: Compile with debug symbols (@-g@) and debug output (warning, it may affect performance).
--disable-silent-rules: Enable verbose compilation mode (@AM_SILENT_RULES@ disabled)
--enable-doc: Generate documentation along with compilation (for @ROFL@, @ROFL-pipeline@ and @ROFL-hal@). Make sure Doxygen and other dependencies are installed.
* @endcode
*
* @subsection doc_xdpd Extensible Data Path Daemon
*
* We have created a data path implementation on top of ROFL: the "extensible Data Path Daemon":https://www.codebasin.net/redmine/projects/xdpd.
* 
* xdpd is a modular framework for building your own data path seeking to help you in supporting various hardware platforms. 
* 
* More information can be found on the "xdpd project site":https://www.codebasin.net/redmine/projects/xdpd.
*
*/













/**
*
* @mainpage ROFL-PIPELINE library
*
* @section doc Documentation 
* @subsection intro_sec Concept
*
* The ROFL-pipeline library is a platform-independent Openflow forwarding backend engine. The intention was to create a unified common Openflow forwarding backend for several platforms supported by our eXtensible DataPath (xDP <b><-link</
b>) in <a href="https://www.bisdn.de">BISDN</a>, like the UNIX, Network procesors or Broadcom family boards.
* 
* Features:
*  - Complete Openflow processing pipeline, including abstractions of switch (forwarding only), pipeline, table, entry, matches, actions... as well as the subsystems of timers and stats.
*  - Support for multiple Openflow pipeline versions simultaneously (in different logical switches).
*  - Platform indepedent: the library is decoupled from platform specific code. 
*  - Supports logical switch up to  \link PHYSICAL_SWITCH_MAX_LS \endlink running in parallel.
*  - Runtime port(interface) attachment/detachment to/from logical switches
*  - Extensible library:
*     - Easy addition of new Openflow versions
*     - New Openflow Matches
*     - New Openflow Actions 
*     - Clear API to create new software Table Matching Algorithms (flow entry lookup)
*  - Optimzed for performance: specially when using advanced matching algorithms.
*  
* @subsubsection how_can How can ROFL-pipeline library be used
*
*  - As the <b>forwarding engine of an Openflow software switch</b>: take a look at xDP software switch that uses ROFL-pipeline in its platform drivers. 
*  - To <b>keep the state of the forwarding backend</b> and <b>process flow entry expirations</b> and/or <b>some packets</b> in <b>hybrid hardware/software switches</b>: typically hardware switches that do not support
*    all of the capabilities exposed by Openflow, and some must be done in software within embedded systems. 
*  - To <b>only keep the state of the forwarding backend (Openflow configuration)</b> of Openflow Hardware switches: generally to be used by the Openflow endpoint(s)
*
* @subsubsection what_is_not ROFL-pipeline is not...
* 
*  - ...a full-fletched Datapath; it cannot be since it deliverately does not provide Openflow endpoint functionality (neither an Openflow protocol parser), nor the platform specific I/O subsystem for packet handling and injection to the 
Openflow pipeline. Take a look at our xDP for a full-blown datapath using ROFL-pipeline.
*  - ...a complete Openflow-enabled Forwarding Backend; ROFL-pipeline is deliverately platform independent <b>library</b>, hence it does not deal with things like the I/O subsystem or other platform specific subsytems. Take a look at our 
xDP for a complete Openflow-enabled Forwarding Backend that uses ROFL-pipeline.
*  - ...an Openflow endpoint. The Openflow endpoint is out of the scope of ROFL-pipeline.
*
* @subsection arch Architecture overview
*
* @code
* @endcode
*
* Exposed by the library:
*
*  - @ref core "Core APIs and data structures": @copybrief core
*  - @ref mgmt : @copybrief mgmt 
*  - @ref sw_runtime : @copybrief sw_runtime 
*
* Consumed by the library:
*  - @ref platform "Platform dependent APIs", which are subdivided in: 
     - @ref platform_memory : @copybrief platform_memory
     - @ref platform_lock : @copybrief platform_lock
     - @ref platform_atomic : @copybrief platform_atomic
     - @ref platform_packet : @copybrief platform_packet
*  - @ref async_events_hooks : @copybrief async_events_hooks 
*  - @ref core_ma : @copybrief core_ma 
*
* @subsection contrib How to contribute:
*
* TODO...
* @subsection rel_proj Related projects:
*
*  TODO: ROFL, xDP, ROFL-HAL (Abstract Forwarding API)
*
* @subsection author Authors:
*  - Marc Sune Clos <marc.sune (at) bisdn.de>
*  - Victor Alvarez Roig <victor.alvarez (at) bisdn.de>
*  - Tobias Jungel <tobias.jungel (at) bisdn.de>
*  - Andreas Koepsel <andreas.koepsel (at) bisdn.de>
*
* TODO: link to BISDN website
*
* @subsection license Licensing:
*
* The code is distributed under MPL v2: http://www.mozilla.org/MPL/ 
*
* The ROFL pipeline library is part of a more extensive C/C++ library called ROFL (Revised OpenFlow Library).
* 
*/

